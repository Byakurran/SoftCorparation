package Pack;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class AdminPanel extends javax.swing.JFrame {

  Connection_DB Con_DB = new Connection_DB();  
  AdminFinds AdFinds = new AdminFinds(); 
  AdminPeopleList AP_List = new AdminPeopleList();
  String SQL;  
    
    
    
        public AdminPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ProjectText = new javax.swing.JTextField();
        ProjectProgress = new javax.swing.JComboBox<>();
        FindS = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Del = new javax.swing.JButton();
        Clean = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        NameText = new javax.swing.JComboBox<>();
        StatusText = new javax.swing.JComboBox<>();
        Tema_Project = new javax.swing.JTextField();
        Tip_Project = new javax.swing.JComboBox<>();
        Priory_Project = new javax.swing.JComboBox<>();
        Opisanie = new javax.swing.JTextField();
        PeoplePanelEdit = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        FIO = new javax.swing.JTextField();
        ADD_Pass = new javax.swing.JTextField();
        ADD_People = new javax.swing.JButton();
        DEL_People = new javax.swing.JButton();
        EDIT_People = new javax.swing.JButton();
        CLEAN_DATA_P = new javax.swing.JButton();
        Exit_Redact = new javax.swing.JButton();
        AddStatus = new javax.swing.JComboBox<>();
        Dostup_db = new javax.swing.JComboBox<>();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        Aunt = new javax.swing.JMenuItem();
        AddPeopleEDITOR = new javax.swing.JMenuItem();
        AllPeople = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Панель администратора");
        setPreferredSize(new java.awt.Dimension(1066, 375));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Имя сотрудника");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Должность");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Проект");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Стадия проекта");

        ProjectProgress.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Разработка проекта", "Тестирование", "Правка ошибок", "Финальное тестирование", "Проект завершен" }));

        FindS.setText("Найти");
        FindS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindSActionPerformed(evt);
            }
        });

        Add.setText("Добавить");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Edit.setText("Изменить");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        Del.setText("Удалить");
        Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelActionPerformed(evt);
            }
        });

        Clean.setText("Очистить");
        Clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Тема проекта");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Тип проекта");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Приоритет проекта");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Описание проекта");

        NameText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        NameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameTextActionPerformed(evt);
            }
        });

        StatusText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        Tip_Project.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Разработка кроссплатформенное ПО", "Разработка приложения под \"OS Windows\"", "Разработка приложения под \"OS Linux\"", "Разработка приложения под \"Mac OS\"", "Разработка приложения под \"OS Android\"", "Разработка сайта" }));

        Priory_Project.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Без срочно", "Низкий ", "Средний ", "Высокйи", "Срочно" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Clean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NameText, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(StatusText, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ProjectText, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tema_Project, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FindS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Tip_Project, 0, 285, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                            .addComponent(Priory_Project, 0, 285, Short.MAX_VALUE)
                            .addComponent(Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                            .addComponent(ProjectProgress, 0, 285, Short.MAX_VALUE)
                            .addComponent(Edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Opisanie))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {NameText, jLabel1});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {StatusText, jLabel2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ProjectText, jLabel3});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ProjectText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(StatusText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Tema_Project, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(NameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel4)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tip_Project, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Priory_Project, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProjectProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Opisanie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FindS, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Del, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Clean, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        PeoplePanelEdit.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PeoplePanelEdit.setEnabled(false);
        PeoplePanelEdit.setFocusable(false);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Ф.И.О. сотрудника");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Должность");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Пароль к учетной записи");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Доступ к базе данных");

        ADD_Pass.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        ADD_People.setText("Добавить учетную запись сотрудника");
        ADD_People.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADD_PeopleActionPerformed(evt);
            }
        });

        DEL_People.setText("Удалить учетную запись сотрудника");
        DEL_People.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DEL_PeopleActionPerformed(evt);
            }
        });

        EDIT_People.setText("Изменить учетную запись сотрудника");
        EDIT_People.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EDIT_PeopleActionPerformed(evt);
            }
        });

        CLEAN_DATA_P.setText("Очистить поля");
        CLEAN_DATA_P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEAN_DATA_PActionPerformed(evt);
            }
        });

        Exit_Redact.setText("Отмена режима редактирования");
        Exit_Redact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_RedactActionPerformed(evt);
            }
        });

        AddStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Руководитель отделения", "Руководитель проекта", "Старший сотрудник", "Младший сотрудник", "Стажер" }));

        Dostup_db.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "admin", "User (Нет доступа к редактированию базы данных)" }));

        javax.swing.GroupLayout PeoplePanelEditLayout = new javax.swing.GroupLayout(PeoplePanelEdit);
        PeoplePanelEdit.setLayout(PeoplePanelEditLayout);
        PeoplePanelEditLayout.setHorizontalGroup(
            PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PeoplePanelEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Exit_Redact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PeoplePanelEditLayout.createSequentialGroup()
                        .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ADD_People, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FIO, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DEL_People, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PeoplePanelEditLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PeoplePanelEditLayout.createSequentialGroup()
                                .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(EDIT_People, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ADD_Pass, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Dostup_db, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CLEAN_DATA_P, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );

        PeoplePanelEditLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ADD_Pass, AddStatus, Dostup_db, FIO, jLabel5, jLabel6, jLabel7, jLabel8});

        PeoplePanelEditLayout.setVerticalGroup(
            PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PeoplePanelEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ADD_Pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Dostup_db, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PeoplePanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ADD_People, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DEL_People, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EDIT_People, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CLEAN_DATA_P, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Exit_Redact, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        FileMenu.setText("Файл");

        Aunt.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Aunt.setText("Аунтификация");
        Aunt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuntActionPerformed(evt);
            }
        });
        FileMenu.add(Aunt);

        AddPeopleEDITOR.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        AddPeopleEDITOR.setText("Редактор сотрудников");
        AddPeopleEDITOR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPeopleEDITORActionPerformed(evt);
            }
        });
        FileMenu.add(AddPeopleEDITOR);

        AllPeople.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        AllPeople.setText("Список всех сотрудников");
        AllPeople.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllPeopleActionPerformed(evt);
            }
        });
        FileMenu.add(AllPeople);

        MenuBar.add(FileMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PeoplePanelEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PeoplePanelEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setSize(1200, 280);
        ReFindUserS();
        FindUserS();
        PeoplePanelEdit.setVisible(false);
        Clean_FIND_Data();         
    }//GEN-LAST:event_formWindowOpened

    private void CleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleanActionPerformed
        Clean_FIND_Data();
    }//GEN-LAST:event_CleanActionPerformed

    private void FindSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindSActionPerformed
        FindS();
    }//GEN-LAST:event_FindSActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
          String NAME=NameText.getSelectedItem().toString(),
                STATUS=StatusText.getSelectedItem().toString(),
                PROJECT=ProjectText.getText(),
                S_PROJECT=ProjectProgress.getSelectedItem().toString(),                
                TEMA_Project=Tema_Project.getText(),
                tip_Project=Tip_Project.getSelectedItem().toString(),
                project_Priory=Priory_Project.getSelectedItem().toString(),
                opisanie=Opisanie.getText();
        
        if (NAME.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Сотрудник) не заполнено!");            
        } else {
               if (STATUS.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Должность) не заполнено!");                   
               } else {
                   if (PROJECT.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Проект) не заполнено!");                      
                   } else {
                       if (TEMA_Project.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Тема проекта) не заполнено!");                          
                       } else {
                           if (tip_Project.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Тип проекта) не заполнено!");                               
                           } else {
                               if (project_Priory.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Приоритет проекта) не заполнено!");                                   
                               } else {
                                   if (S_PROJECT.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Статус пректа) не заполнено!");                                      
                                   } else {
                                       if (opisanie.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Описание проекта) не заполнено!");                                           
                                       } else {
                                            
                                           String InSQL,ValuesSQL;
                                           
                                           InSQL = "INSERT INTO \"PUBLIC\".SOFTCORPARATION (\"NAME\", STATUS, PROJECT, PROJECT_TEMA, PROJECT_TIP, PROJECT_PRIORY, PROJECTSTATUS, OPISANIE) ";
                                           ValuesSQL = "VALUES ('"+NAME+"','"+STATUS+"','"+PROJECT+"','"+TEMA_Project+"','"+tip_Project+"','"+project_Priory+"','"+S_PROJECT+"','"+opisanie+"');"; 
                                            
                                           String InsertSQL = InSQL + ValuesSQL;
                                            
                                           Con_DB.InsertSQL = InsertSQL;        
                                           Con_DB.Insert(); 
                                           Clean_FIND_Data();
                                           
                                       }
                                   }
                               }
                           }
                       }
                   }
               }
        }
    }//GEN-LAST:event_AddActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        SQL = "SELECT * FROM \"PUBLIC\".SOFTCORPARATION where ";
        String SQL_Update1 = "UPDATE \"PUBLIC\".SOFTCORPARATION SET ",
        SQL_Update2 = "WHERE ",
        SQL_Update="";
        String NAME,STATUS,PROJECT,S_PROJECT,TEMA_Project,Tip_project,Project_Priory,opisanie;
        
        NAME = NameText.getSelectedItem().toString();
        int Izm_SQL = 0;
        
        if (NAME.equals(" ")) {
            //SQL = "SELECT * FROM \"PUBLIC\".SOFTCORPARATION ";            
        } else {
            //SQL = SQL + "lower(NAME) like lower('%"+NAME+"%') ";
            Izm_SQL = 1;            
            String Test = JOptionPane.showInputDialog(null, "Введите нового сотрудника!");
            if (Test == null) {                
            } else {
                SQL_Update1 =SQL_Update1 + "\"NAME\" = '"+Test+"' ,";
                SQL_Update2 =SQL_Update2 + "\"NAME\" = '"+NAME+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2; 
            }
            
                       
        }
        
        STATUS = StatusText.getSelectedItem().toString();
        
        if (STATUS.equals(" ")) {            
        } else {
            if (Izm_SQL == 0) {
                //SQL = SQL + "where lower(STATUS) like lower('%"+STATUS+"%') ";
                Izm_SQL = 1;
                String Test = JOptionPane.showInputDialog(null, "Введите новое значение должности!");
                if (Test == null) {
                } else {
                    SQL_Update1 =SQL_Update1 + "\"STATUS\" = '"+Test+"' ,";
                    SQL_Update2 = SQL_Update2 + "\"STATUS\" = '"+STATUS+"' " ;
                    SQL_Update = SQL_Update1 + SQL_Update2;
                }
            } else {
                //SQL = SQL + "and lower(STATUS) like lower('%"+STATUS+"%') ";
                String Test = JOptionPane.showInputDialog(null, "Введите новое значение должности!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"STATUS\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + " AND \"STATUS\" = '"+STATUS+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }
                
            }
        }        
               
        PROJECT = ProjectText.getText();
        
        if (PROJECT.equals("")) {            
        } else {
            if (Izm_SQL == 0) {
                //SQL = SQL + "where lower(PROJECT) like lower('%"+PROJECT+"%') ";
                Izm_SQL = 1;
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECT\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + "\"PROJECT\" = '"+PROJECT+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }                
            } else {
                SQL = SQL + "and lower(PROJECT) like lower('%"+PROJECT+"%') ";
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECT\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + " AND \"PROJECT\" = '"+PROJECT+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }               
                
            }
        }
        
        TEMA_Project = Tema_Project.getText();
        
        if (TEMA_Project.equals("")) {            
        } else {
            if (Izm_SQL == 0) {
               //SQL = SQL + "where lower(PROJECT) like lower('%"+TEMA_Project+"%') ";
                Izm_SQL = 1;
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECT_TEMA\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + "\"PROJECT_TEMA\" = '"+TEMA_Project+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }                
            } else {
                //SQL = SQL + "and lower(PROJECT) like lower('%"+TEMA_Project+"%') ";
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECT_TEMA\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + " AND \"PROJECT_TEMA\" = '"+TEMA_Project+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }
                
                
            }
        }
        
        
        Tip_project = Tip_Project.getSelectedItem().toString();
        
        if (Tip_project.equals(" ")) {            
        } else {
            if (Izm_SQL == 0) {
                //SQL = SQL + "where lower(PROJECT) like lower('%"+Tip_project+"%') ";
                Izm_SQL = 1;
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECT_TIP\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + "\"PROJECT_TIP\" = '"+Tip_project+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }                
            } else {
                //SQL = SQL + "and lower(PROJECT) like lower('%"+Tip_project+"%') ";
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECT_TIP\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + " AND \"PROJECT_TIP\" = '"+Tip_project+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }              
                
            }
        }
        
        Project_Priory = Priory_Project.getSelectedItem().toString();
        
        if (Project_Priory.equals(" ")) {            
        } else {
            if (Izm_SQL == 0) {
                //SQL = SQL + "where lower(PROJECT) like lower('%"+Project_Priory+"%') ";
                Izm_SQL = 1;
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECT_PRIORY\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + "\"PROJECT_PRIORY\" = '"+Project_Priory+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }                
            } else {
                //SQL = SQL + "and lower(PROJECT) like lower('%"+Project_Priory+"%') ";
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECT_PRIORY\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + " AND \"PROJECT_PRIORY\" = '"+Project_Priory+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }               
                
            }
        }
        
        S_PROJECT = ProjectProgress.getSelectedItem().toString();  
        
        
        if (S_PROJECT.equals(" ")) {                  
        } else {
            if (Izm_SQL == 0) {
                //SQL = SQL + "where lower(PROJECTSTATUS) like lower('%"+S_PROJECT+"%') ";
                String Test = JOptionPane.showInputDialog(null, "Введите новое значение статуса проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECTSTATUS\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + "\"PROJECTSTATUS\" = '"+S_PROJECT+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }
                
                
            } else {
                //SQL = SQL + "and lower(PROJECTSTATUS) like lower('%"+S_PROJECT+"%') ";
                String Test = JOptionPane.showInputDialog(null, "Введите новое значение статуса проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"PROJECTSTATUS\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + " AND \"PROJECTSTATUS\" = '"+S_PROJECT+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                } 
            }
        }
        
        opisanie = Opisanie.getText();
        
        if (opisanie.equals("")) {            
        } else {
            if (Izm_SQL == 0) {
                //SQL = SQL + "where lower(\"OPISANIE\") like lower('%"+opisanie+"%') ";
                Izm_SQL = 1;
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"OPISANIE\" = '"+Test+"' ,";
                SQL_Update2 = SQL_Update2 + "\"OPISANIE\" = '"+opisanie+"' " ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }                
            } else {
                SQL = SQL + "and lower(OPISANIE) like lower('%"+opisanie+"%') ";
                String Test = JOptionPane.showInputDialog(null, "Введите новое наименование проекта!");
                if (Test == null) {
                } else {
                SQL_Update1 =SQL_Update1 + "\"OPISANIE\" = '"+Test+"' ";
                SQL_Update2 = SQL_Update2 + " AND \"OPISANIE\" = '"+opisanie+"'" ;
                SQL_Update = SQL_Update1 + SQL_Update2;
                }
            }
        }        
        System.err.println(SQL_Update);
        
        Con_DB.SQL = SQL;
        AdFinds.SQL = SQL;
        Con_DB.UpdateSQL = SQL_Update;
        Con_DB.Connect();
        Con_DB.Update();
        AdFinds.CleanTable();
        //AdFinds.Show_User();
        //AdFinds.setVisible(true);
        Clean_FIND_Data();
        
    }//GEN-LAST:event_EditActionPerformed

    private void DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelActionPerformed
        String NAME=NameText.getSelectedItem().toString(),
                STATUS=StatusText.getSelectedItem().toString(),
                PROJECT=ProjectText.getText(),
                S_PROJECT=ProjectProgress.getSelectedItem().toString(),                
                TEMA_Project=Tema_Project.getText(),
                tip_Project=Tip_Project.getSelectedItem().toString(),
                project_Priory=Priory_Project.getSelectedItem().toString(),
                opisanie=Opisanie.getText();
        
        if (NAME.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Сотрудник) не заполнено!");            
        } else {
               if (STATUS.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Должность) не заполнено!");                   
               } else {
                   if (PROJECT.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Проект) не заполнено!");                      
                   } else {
                       if (TEMA_Project.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Тема проекта) не заполнено!");                          
                       } else {
                           if (tip_Project.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Тип проекта) не заполнено!");                               
                           } else {
                               if (project_Priory.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Приоритет проекта) не заполнено!");                                   
                               } else {
                                   if (S_PROJECT.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Статус пректа) не заполнено!");                                      
                                   } else {
                                       if (opisanie.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Описание проекта) не заполнено!");                                           
                                       } else {
                                            String DeleteSQL = "DELETE FROM \"PUBLIC\".SOFTCORPARATION WHERE lower(\"NAME\") like lower('%"+NAME+"%') AND lower(STATUS) like lower('%"+STATUS+"%') AND lower(PROJECT) like lower('%"+PROJECT+"%') AND lower(PROJECT_TEMA) like lower('%"+TEMA_Project+"%') AND lower(PROJECT_TIP)  like lower('%"+tip_Project+"%') AND lower(PROJECT_PRIORY) like lower('%"+project_Priory+"%') AND lower(PROJECTSTATUS) like lower('%"+S_PROJECT+"%') AND lower(OPISANIE) like lower('%"+opisanie+"%');";
                                            SQL = "SELECT * FROM \"PUBLIC\".SOFTCORPARATION ";
                                            Con_DB.SQL = SQL;
                                            Con_DB.DeleteSQL = DeleteSQL;        
                                            Con_DB.DELETE_Row();                                            
                                       }
                                   }
                               }
                           }
                       }
                   }
               }
        }
    }//GEN-LAST:event_DelActionPerformed

    private void AllPeopleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllPeopleActionPerformed
        AP_List.CleanTable();
        AP_List.Show_User();
        AP_List.setVisible(true);
    }//GEN-LAST:event_AllPeopleActionPerformed

    private void AddPeopleEDITORActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPeopleEDITORActionPerformed
        PeoplePanelEdit.setVisible(true);
        AP_List.setVisible(true);
        setSize(1200, 435);
        
    }//GEN-LAST:event_AddPeopleEDITORActionPerformed

    private void Exit_RedactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_RedactActionPerformed
        PeoplePanelEdit.setVisible(false);        
        setSize(1200, 280);
        AP_List.setVisible(false);
    }//GEN-LAST:event_Exit_RedactActionPerformed

    private void ADD_PeopleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADD_PeopleActionPerformed
        String fIO,STATUS,PASS,DOSTUP;
        fIO = FIO.getText();
        STATUS = AddStatus.getSelectedItem().toString();
        PASS = ADD_Pass.getText();
        DOSTUP = Dostup_db.getSelectedItem().toString();
        if (fIO.equals("")) {            
        } else {
            if (STATUS.equals(" ")) {                
            } else {
                if (PASS.equals("")) {                    
                } else {
                    if (DOSTUP.equals(" ")) {                        
                    } else {
                           String InSQL,ValuesSQL;
                                           
                           InSQL = "INSERT INTO \"PUBLIC\".AUNT (\"NAME\", STATUS, PASS, DOSTUP) ";
                           ValuesSQL = "VALUES ('"+fIO+"', '"+STATUS+"', '"+PASS+"', '"+DOSTUP+"');"; 

                           String InsertSQL = InSQL + ValuesSQL;

                           SQL = "SELECT * FROM \"PUBLIC\".AUNT";
                           Con_DB.SQL = SQL;
                           Con_DB.Connect();
                           Con_DB.InsertSQL = InsertSQL;        
                           Con_DB.Insert();
                    }
                }
            }
        }
        
        AddStatus.setSelectedItem(" ");
        Dostup_db.setSelectedItem(" ");
        FIO.setText("");
        ADD_Pass.setText("");
        
        AP_List.CleanTable();
        AP_List.Show_User();
        AP_List.setVisible(true);
        
        ReFindUserS();
        FindUserS();
        
    }//GEN-LAST:event_ADD_PeopleActionPerformed

    private void DEL_PeopleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DEL_PeopleActionPerformed
        String fIO,STATUS,PASS,DOSTUP;
        fIO = FIO.getText();
        STATUS = AddStatus.getSelectedItem().toString();
        PASS = ADD_Pass.getText();
        DOSTUP = Dostup_db.getSelectedItem().toString();
        
        if (fIO.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Сотрудник) не заполнено!");            
        } else {
            if (STATUS.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Должность) не заполнено!");                
            } else {
                if (PASS.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Пароль) не заполнено!");                   
                } else {
                    if (DOSTUP.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Доступ) не заполнено!");                        
                    } else {
                        String DeleteSQL = "DELETE FROM \"PUBLIC\".AUNT WHERE \"NAME\" = '"+fIO+"' AND STATUS = '"+STATUS+"' AND PASS = '"+PASS+"' AND DOSTUP = '"+DOSTUP+"';";    
                        Con_DB.DeleteSQL = DeleteSQL;        
                        Con_DB.DELETE_Row();                        
                    }
                }
            }
        }
        
        AddStatus.setSelectedItem(" ");
        Dostup_db.setSelectedItem(" ");        
        FIO.setText("");
        ADD_Pass.setText("");        
       
        AP_List.CleanTable();
        AP_List.Show_User();
        AP_List.setVisible(true);
        
        ReFindUserS();
        FindUserS();
    }//GEN-LAST:event_DEL_PeopleActionPerformed

    private void EDIT_PeopleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EDIT_PeopleActionPerformed
        String fIO,STATUS,PASS,DOSTUP;
        fIO = FIO.getText();
        STATUS = AddStatus.getSelectedItem().toString();
        PASS = ADD_Pass.getText();
        DOSTUP = Dostup_db.getSelectedItem().toString();
        
        if (fIO.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Сотрудник) не заполнено!");            
        } else {
            if (STATUS.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Должность) не заполнено!");                
            } else {
                if (PASS.equals("")) {JOptionPane.showMessageDialog(null, "Поле (Пароль) не заполнено!");                   
                } else {
                    if (DOSTUP.equals(" ")) {JOptionPane.showMessageDialog(null, "Поле (Доступ) не заполнено!");                        
                    } else {
                        String UpdateSQL = "UPDATE \"DB\".\"PUBLIC\".AUNT SET \"NAME\" = '"+JOptionPane.showInputDialog(null,"Введите новое имя сотрудника!")+"', \"STATUS\" = '"+JOptionPane.showInputDialog(null,"Введите новое назначение на должность!")+"', \"PASS\" = '"+JOptionPane.showInputDialog(null,"Введите новый пароль к учетной записи!")+"', \"DOSTUP\" = '"+JOptionPane.showInputDialog(null,"Введите новый уровень доступа к базе данных!")+"' WHERE \"NAME\" = '"+fIO+"' AND STATUS = '"+STATUS+"' AND PASS = '"+PASS+"' AND DOSTUP = '"+DOSTUP+"';";    
                        Con_DB.UpdateSQL = UpdateSQL;        
                        Con_DB.Update();                        
                    }
                }
            }
        }
        
        AddStatus.setSelectedItem(" ");
        Dostup_db.setSelectedItem(" ");        
        FIO.setText("");
        ADD_Pass.setText("");        
       
        AP_List.CleanTable();
        AP_List.Show_User();
        AP_List.setVisible(true);
        
        ReFindUserS();
        FindUserS();
    }//GEN-LAST:event_EDIT_PeopleActionPerformed

    private void CLEAN_DATA_PActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEAN_DATA_PActionPerformed
        AddStatus.setSelectedItem(" ");
        Dostup_db.setSelectedItem(" ");
        FIO.setText("");
        ADD_Pass.setText("");
    }//GEN-LAST:event_CLEAN_DATA_PActionPerformed

    private void NameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameTextActionPerformed
        if (NameText.getSelectedItem().equals(" ")) {            
        } else {
        String SQLPeople = "SELECT * FROM \"PUBLIC\".AUNT where lower(\"NAME\") like lower('%"+NameText.getSelectedItem().toString()+"%')";
        Con_DB.SQL = SQLPeople;
        Con_DB.Connect();
      try {
          Con_DB.RS.next();
          StatusText.setSelectedItem(Con_DB.RS.getString("STATUS"));
          FIO.setText(Con_DB.RS.getString("NAME"));
          AddStatus.setSelectedItem(Con_DB.RS.getString("STATUS"));
          ADD_Pass.setText(Con_DB.RS.getString("PASS"));
          Dostup_db.setSelectedItem(Con_DB.RS.getString("DOSTUP"));
      } catch (SQLException ex) {
          Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
      }
        }
    }//GEN-LAST:event_NameTextActionPerformed

    private void AuntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuntActionPerformed
        dispose();
        Main main = new Main();
        main.setVisible(true);
    }//GEN-LAST:event_AuntActionPerformed

    public void FindS() {
        SQL = "SELECT * FROM \"PUBLIC\".SOFTCORPARATION where ";
        
        String NAME=NameText.getSelectedItem().toString(),
                STATUS=StatusText.getSelectedItem().toString(),
                PROJECT=ProjectText.getText(),
                S_PROJECT=ProjectProgress.getSelectedItem().toString(),                
                TEMA_Project=Tema_Project.getText(),
                tip_Project=Tip_Project.getSelectedItem().toString(),
                project_Priory=Priory_Project.getSelectedItem().toString(),
                opisanie=Opisanie.getText();
        
        
        int Izm_SQL = 0;
        if (NAME.equals(" ")) {
            SQL = "SELECT * FROM \"PUBLIC\".SOFTCORPARATION ";            
        } else {
            SQL = SQL + "lower(NAME) like lower('%"+NAME+"%') ";
            Izm_SQL = 1;
        }
        
        if (STATUS.equals(" ")) {            
        } else {
            if (Izm_SQL == 0) {
                SQL = SQL + "where lower(STATUS) like lower('%"+STATUS+"%') ";
                Izm_SQL = 1;
            } else {
                SQL = SQL + "and lower(STATUS) like lower('%"+STATUS+"%') ";
            }
        }
        
        if (PROJECT.equals("")) {            
        } else {
            if (Izm_SQL == 0) {
                SQL = SQL + "where lower(PROJECT) like lower('%"+PROJECT+"%') ";
                Izm_SQL = 1;
            } else {
                SQL = SQL + "and lower(PROJECT) like lower('%"+PROJECT+"%') ";
            }
        }
        
        if (TEMA_Project.equals("")) {            
        } else {
            if (Izm_SQL == 0) {
                SQL = SQL + "where lower(PROJECT_TEMA) like lower('%"+TEMA_Project+"%') ";
                Izm_SQL = 1;
            } else {
                SQL = SQL + "and lower(PROJECT_TEMA) like lower('%"+TEMA_Project+"%') ";
            }
        }
        
        if (tip_Project.equals(" ")) {            
        } else {
            if (Izm_SQL == 0) {
                SQL = SQL + "where lower(PROJECT_TIP) like lower('%"+tip_Project+"%') ";
                Izm_SQL = 1;
            } else {
                SQL = SQL + "and lower(PROJECT_TIP) like lower('%"+tip_Project+"%') ";
            }
        }
        
        if (project_Priory.equals(" ")) {            
        } else {
            if (Izm_SQL == 0) {
                SQL = SQL + "where lower(PROJECT_PRIORY) like lower('%"+project_Priory+"%') ";
                Izm_SQL = 1;
            } else {
                SQL = SQL + "and lower(PROJECT_PRIORY) like lower('%"+project_Priory+"%') ";
            }
        }
        
        if (S_PROJECT.equals(" ")) {                  
        } else {
            if (Izm_SQL == 0) {
                SQL = SQL + "where lower(PROJECTSTATUS) like lower('%"+S_PROJECT+"%') ";
            } else {
                SQL = SQL + "and lower(PROJECTSTATUS) like lower('%"+STATUS+"%') ";
            }
        }
        
        if (opisanie.equals("")) {            
        } else {
            if (Izm_SQL == 0) {
                SQL = SQL + "where lower(OPISANIE) like lower('%"+opisanie+"%') ";
                Izm_SQL = 1;
            } else {
                SQL = SQL + "and lower(OPISANIE) like lower('%"+opisanie+"%') ";
            }
        }
        
        Con_DB.SQL = SQL;
        AdFinds.SQL = SQL;
        Con_DB.Connect();
        AdFinds.CleanTable();
        AdFinds.Show_User();
        AdFinds.setVisible(true);  
        
        
    } 
    
    private void Clean_FIND_Data() {
        NameText.setSelectedItem(" ");
        StatusText.setSelectedItem(" ");
        ProjectText.setText("");
        Tema_Project.setText("");
        Tip_Project.setSelectedItem(" ");
        Priory_Project.setSelectedItem(" ");
        ProjectProgress.setSelectedItem(" ");
        Opisanie.setText("");
        AdFinds.CleanTable();        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
            //</editor-fold>
            //</editor-fold>
            //</editor-fold>
            //</editor-fold>
            
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ADD_Pass;
    private javax.swing.JButton ADD_People;
    private javax.swing.JButton Add;
    private javax.swing.JMenuItem AddPeopleEDITOR;
    private javax.swing.JComboBox<String> AddStatus;
    private javax.swing.JMenuItem AllPeople;
    private javax.swing.JMenuItem Aunt;
    private javax.swing.JButton CLEAN_DATA_P;
    private javax.swing.JButton Clean;
    private javax.swing.JButton DEL_People;
    private javax.swing.JButton Del;
    private javax.swing.JComboBox<String> Dostup_db;
    private javax.swing.JButton EDIT_People;
    private javax.swing.JButton Edit;
    private javax.swing.JButton Exit_Redact;
    private javax.swing.JTextField FIO;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JButton FindS;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JComboBox<String> NameText;
    private javax.swing.JTextField Opisanie;
    private javax.swing.JPanel PeoplePanelEdit;
    private javax.swing.JComboBox<String> Priory_Project;
    private javax.swing.JComboBox<String> ProjectProgress;
    private javax.swing.JTextField ProjectText;
    private javax.swing.JComboBox<String> StatusText;
    private javax.swing.JTextField Tema_Project;
    private javax.swing.JComboBox<String> Tip_Project;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void FindUserS() {
        Con_DB.SQL = "SELECT * FROM \"PUBLIC\".AUNT"; 
        Con_DB.Connect();        
        try {
            while (Con_DB.RS.next()) {                
                NameText.addItem(Con_DB.RS.getString("NAME"));                
            }
        } catch (SQLException e) {
            System.out.println("Ошибка чтения базы данных!");
            JOptionPane.showMessageDialog(null, "Ошибка чтения базы данных!");
        }
        
    }

    private void ReFindUserS() {
        DefaultComboBoxModel comboCleanName = new DefaultComboBoxModel();
        DefaultComboBoxModel comboCleanStatus = new DefaultComboBoxModel();
        NameText.setModel(comboCleanName);
        NameText.addItem(" ");
        StatusText.setModel(comboCleanStatus);
        StatusText.addItem(" ");
        StatusText.addItem("Руководитель отделения");
        StatusText.addItem("Руководитель проекта");
        StatusText.addItem("Старший сотрудник");
        StatusText.addItem("Младший сотрудник");
        StatusText.addItem("Стажер");
    }
    
}
